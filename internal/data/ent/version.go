// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"yayar/internal/data/ent/version"

	"entgo.io/ent/dialect/sql"
)

// Version is the model entity for the Version schema.
type Version struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// Build holds the value of the "build" field.
	Build int `json:"build,omitempty"`
	// ApkSize holds the value of the "apk_size" field.
	ApkSize float64 `json:"apk_size,omitempty"`
	// IpaSize holds the value of the "ipa_size" field.
	IpaSize float64 `json:"ipa_size,omitempty"`
	// IpaURL holds the value of the "ipa_url" field.
	IpaURL string `json:"ipa_url,omitempty"`
	// ApkURL holds the value of the "apk_url" field.
	ApkURL string `json:"apk_url,omitempty"`
	// PlistURL holds the value of the "plist_url" field.
	PlistURL string `json:"plist_url,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Access holds the value of the "access" field.
	Access string `json:"access,omitempty"`
	// AccessCode holds the value of the "access_code" field.
	AccessCode string `json:"access_code,omitempty"`
	// Status holds the value of the "status" field.
	// 0 全部禁止访问； 1 允许访问iOS下载包； 2 允许访问安卓下载包；3 允许访问苹果、安卓下载包
	Status int `json:"status,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VersionQuery when eager-loading is set.
	Edges VersionEdges `json:"edges"`
}

// VersionEdges holds the relations/edges for other nodes in the graph.
type VersionEdges struct {
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// App holds the value of the app edge.
	App []*App `json:"app,omitempty"`
	// Histories holds the value of the histories edge.
	Histories []*History `json:"histories,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e VersionEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading.
func (e VersionEdges) AppOrErr() ([]*App, error) {
	if e.loadedTypes[1] {
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "app"}
}

// HistoriesOrErr returns the Histories value or an error if the edge
// was not loaded in eager-loading.
func (e VersionEdges) HistoriesOrErr() ([]*History, error) {
	if e.loadedTypes[2] {
		return e.Histories, nil
	}
	return nil, &NotLoadedError{edge: "histories"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Version) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case version.FieldApkSize, version.FieldIpaSize:
			values[i] = new(sql.NullFloat64)
		case version.FieldID, version.FieldBuild, version.FieldStatus:
			values[i] = new(sql.NullInt64)
		case version.FieldVersion, version.FieldIpaURL, version.FieldApkURL, version.FieldPlistURL, version.FieldDescription, version.FieldAccess, version.FieldAccessCode:
			values[i] = new(sql.NullString)
		case version.FieldCreatedAt, version.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Version", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Version fields.
func (v *Version) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case version.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case version.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				v.Version = value.String
			}
		case version.FieldBuild:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field build", values[i])
			} else if value.Valid {
				v.Build = int(value.Int64)
			}
		case version.FieldApkSize:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field apk_size", values[i])
			} else if value.Valid {
				v.ApkSize = value.Float64
			}
		case version.FieldIpaSize:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field ipa_size", values[i])
			} else if value.Valid {
				v.IpaSize = value.Float64
			}
		case version.FieldIpaURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ipa_url", values[i])
			} else if value.Valid {
				v.IpaURL = value.String
			}
		case version.FieldApkURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field apk_url", values[i])
			} else if value.Valid {
				v.ApkURL = value.String
			}
		case version.FieldPlistURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plist_url", values[i])
			} else if value.Valid {
				v.PlistURL = value.String
			}
		case version.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				v.Description = value.String
			}
		case version.FieldAccess:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access", values[i])
			} else if value.Valid {
				v.Access = value.String
			}
		case version.FieldAccessCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_code", values[i])
			} else if value.Valid {
				v.AccessCode = value.String
			}
		case version.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				v.Status = int(value.Int64)
			}
		case version.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				v.CreatedAt = value.Time
			}
		case version.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				v.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Version entity.
func (v *Version) QueryUser() *UserQuery {
	return (&VersionClient{config: v.config}).QueryUser(v)
}

// QueryApp queries the "app" edge of the Version entity.
func (v *Version) QueryApp() *AppQuery {
	return (&VersionClient{config: v.config}).QueryApp(v)
}

// QueryHistories queries the "histories" edge of the Version entity.
func (v *Version) QueryHistories() *HistoryQuery {
	return (&VersionClient{config: v.config}).QueryHistories(v)
}

// Update returns a builder for updating this Version.
// Note that you need to call Version.Unwrap() before calling this method if this Version
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Version) Update() *VersionUpdateOne {
	return (&VersionClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the Version entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Version) Unwrap() *Version {
	tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Version is not a transactional entity")
	}
	v.config.driver = tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Version) String() string {
	var builder strings.Builder
	builder.WriteString("Version(")
	builder.WriteString(fmt.Sprintf("id=%v", v.ID))
	builder.WriteString(", version=")
	builder.WriteString(v.Version)
	builder.WriteString(", build=")
	builder.WriteString(fmt.Sprintf("%v", v.Build))
	builder.WriteString(", apk_size=")
	builder.WriteString(fmt.Sprintf("%v", v.ApkSize))
	builder.WriteString(", ipa_size=")
	builder.WriteString(fmt.Sprintf("%v", v.IpaSize))
	builder.WriteString(", ipa_url=")
	builder.WriteString(v.IpaURL)
	builder.WriteString(", apk_url=")
	builder.WriteString(v.ApkURL)
	builder.WriteString(", plist_url=")
	builder.WriteString(v.PlistURL)
	builder.WriteString(", description=")
	builder.WriteString(v.Description)
	builder.WriteString(", access=")
	builder.WriteString(v.Access)
	builder.WriteString(", access_code=")
	builder.WriteString(v.AccessCode)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", v.Status))
	builder.WriteString(", createdAt=")
	builder.WriteString(v.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(v.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Versions is a parsable slice of Version.
type Versions []*Version

func (v Versions) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
