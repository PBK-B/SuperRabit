// Code generated by entc, DO NOT EDIT.

package version

import (
	"time"
	"yayar/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// Build applies equality check predicate on the "build" field. It's identical to BuildEQ.
func Build(v int) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBuild), v))
	})
}

// ApkSize applies equality check predicate on the "apk_size" field. It's identical to ApkSizeEQ.
func ApkSize(v float64) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApkSize), v))
	})
}

// IpaSize applies equality check predicate on the "ipa_size" field. It's identical to IpaSizeEQ.
func IpaSize(v float64) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIpaSize), v))
	})
}

// IpaURL applies equality check predicate on the "ipa_url" field. It's identical to IpaURLEQ.
func IpaURL(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIpaURL), v))
	})
}

// ApkURL applies equality check predicate on the "apk_url" field. It's identical to ApkURLEQ.
func ApkURL(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApkURL), v))
	})
}

// PlistURL applies equality check predicate on the "plist_url" field. It's identical to PlistURLEQ.
func PlistURL(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlistURL), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Access applies equality check predicate on the "access" field. It's identical to AccessEQ.
func Access(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccess), v))
	})
}

// AccessCode applies equality check predicate on the "access_code" field. It's identical to AccessCodeEQ.
func AccessCode(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessCode), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVersion), v))
	})
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVersion), v...))
	})
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVersion), v...))
	})
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVersion), v))
	})
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVersion), v))
	})
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVersion), v))
	})
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVersion), v))
	})
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVersion), v))
	})
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVersion), v))
	})
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVersion), v))
	})
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVersion), v))
	})
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVersion), v))
	})
}

// BuildEQ applies the EQ predicate on the "build" field.
func BuildEQ(v int) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBuild), v))
	})
}

// BuildNEQ applies the NEQ predicate on the "build" field.
func BuildNEQ(v int) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBuild), v))
	})
}

// BuildIn applies the In predicate on the "build" field.
func BuildIn(vs ...int) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBuild), v...))
	})
}

// BuildNotIn applies the NotIn predicate on the "build" field.
func BuildNotIn(vs ...int) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBuild), v...))
	})
}

// BuildGT applies the GT predicate on the "build" field.
func BuildGT(v int) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBuild), v))
	})
}

// BuildGTE applies the GTE predicate on the "build" field.
func BuildGTE(v int) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBuild), v))
	})
}

// BuildLT applies the LT predicate on the "build" field.
func BuildLT(v int) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBuild), v))
	})
}

// BuildLTE applies the LTE predicate on the "build" field.
func BuildLTE(v int) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBuild), v))
	})
}

// ApkSizeEQ applies the EQ predicate on the "apk_size" field.
func ApkSizeEQ(v float64) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApkSize), v))
	})
}

// ApkSizeNEQ applies the NEQ predicate on the "apk_size" field.
func ApkSizeNEQ(v float64) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldApkSize), v))
	})
}

// ApkSizeIn applies the In predicate on the "apk_size" field.
func ApkSizeIn(vs ...float64) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldApkSize), v...))
	})
}

// ApkSizeNotIn applies the NotIn predicate on the "apk_size" field.
func ApkSizeNotIn(vs ...float64) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldApkSize), v...))
	})
}

// ApkSizeGT applies the GT predicate on the "apk_size" field.
func ApkSizeGT(v float64) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldApkSize), v))
	})
}

// ApkSizeGTE applies the GTE predicate on the "apk_size" field.
func ApkSizeGTE(v float64) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldApkSize), v))
	})
}

// ApkSizeLT applies the LT predicate on the "apk_size" field.
func ApkSizeLT(v float64) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldApkSize), v))
	})
}

// ApkSizeLTE applies the LTE predicate on the "apk_size" field.
func ApkSizeLTE(v float64) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldApkSize), v))
	})
}

// ApkSizeIsNil applies the IsNil predicate on the "apk_size" field.
func ApkSizeIsNil() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldApkSize)))
	})
}

// ApkSizeNotNil applies the NotNil predicate on the "apk_size" field.
func ApkSizeNotNil() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldApkSize)))
	})
}

// IpaSizeEQ applies the EQ predicate on the "ipa_size" field.
func IpaSizeEQ(v float64) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIpaSize), v))
	})
}

// IpaSizeNEQ applies the NEQ predicate on the "ipa_size" field.
func IpaSizeNEQ(v float64) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIpaSize), v))
	})
}

// IpaSizeIn applies the In predicate on the "ipa_size" field.
func IpaSizeIn(vs ...float64) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIpaSize), v...))
	})
}

// IpaSizeNotIn applies the NotIn predicate on the "ipa_size" field.
func IpaSizeNotIn(vs ...float64) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIpaSize), v...))
	})
}

// IpaSizeGT applies the GT predicate on the "ipa_size" field.
func IpaSizeGT(v float64) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIpaSize), v))
	})
}

// IpaSizeGTE applies the GTE predicate on the "ipa_size" field.
func IpaSizeGTE(v float64) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIpaSize), v))
	})
}

// IpaSizeLT applies the LT predicate on the "ipa_size" field.
func IpaSizeLT(v float64) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIpaSize), v))
	})
}

// IpaSizeLTE applies the LTE predicate on the "ipa_size" field.
func IpaSizeLTE(v float64) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIpaSize), v))
	})
}

// IpaSizeIsNil applies the IsNil predicate on the "ipa_size" field.
func IpaSizeIsNil() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIpaSize)))
	})
}

// IpaSizeNotNil applies the NotNil predicate on the "ipa_size" field.
func IpaSizeNotNil() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIpaSize)))
	})
}

// IpaURLEQ applies the EQ predicate on the "ipa_url" field.
func IpaURLEQ(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIpaURL), v))
	})
}

// IpaURLNEQ applies the NEQ predicate on the "ipa_url" field.
func IpaURLNEQ(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIpaURL), v))
	})
}

// IpaURLIn applies the In predicate on the "ipa_url" field.
func IpaURLIn(vs ...string) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIpaURL), v...))
	})
}

// IpaURLNotIn applies the NotIn predicate on the "ipa_url" field.
func IpaURLNotIn(vs ...string) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIpaURL), v...))
	})
}

// IpaURLGT applies the GT predicate on the "ipa_url" field.
func IpaURLGT(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIpaURL), v))
	})
}

// IpaURLGTE applies the GTE predicate on the "ipa_url" field.
func IpaURLGTE(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIpaURL), v))
	})
}

// IpaURLLT applies the LT predicate on the "ipa_url" field.
func IpaURLLT(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIpaURL), v))
	})
}

// IpaURLLTE applies the LTE predicate on the "ipa_url" field.
func IpaURLLTE(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIpaURL), v))
	})
}

// IpaURLContains applies the Contains predicate on the "ipa_url" field.
func IpaURLContains(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIpaURL), v))
	})
}

// IpaURLHasPrefix applies the HasPrefix predicate on the "ipa_url" field.
func IpaURLHasPrefix(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIpaURL), v))
	})
}

// IpaURLHasSuffix applies the HasSuffix predicate on the "ipa_url" field.
func IpaURLHasSuffix(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIpaURL), v))
	})
}

// IpaURLIsNil applies the IsNil predicate on the "ipa_url" field.
func IpaURLIsNil() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIpaURL)))
	})
}

// IpaURLNotNil applies the NotNil predicate on the "ipa_url" field.
func IpaURLNotNil() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIpaURL)))
	})
}

// IpaURLEqualFold applies the EqualFold predicate on the "ipa_url" field.
func IpaURLEqualFold(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIpaURL), v))
	})
}

// IpaURLContainsFold applies the ContainsFold predicate on the "ipa_url" field.
func IpaURLContainsFold(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIpaURL), v))
	})
}

// ApkURLEQ applies the EQ predicate on the "apk_url" field.
func ApkURLEQ(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApkURL), v))
	})
}

// ApkURLNEQ applies the NEQ predicate on the "apk_url" field.
func ApkURLNEQ(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldApkURL), v))
	})
}

// ApkURLIn applies the In predicate on the "apk_url" field.
func ApkURLIn(vs ...string) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldApkURL), v...))
	})
}

// ApkURLNotIn applies the NotIn predicate on the "apk_url" field.
func ApkURLNotIn(vs ...string) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldApkURL), v...))
	})
}

// ApkURLGT applies the GT predicate on the "apk_url" field.
func ApkURLGT(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldApkURL), v))
	})
}

// ApkURLGTE applies the GTE predicate on the "apk_url" field.
func ApkURLGTE(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldApkURL), v))
	})
}

// ApkURLLT applies the LT predicate on the "apk_url" field.
func ApkURLLT(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldApkURL), v))
	})
}

// ApkURLLTE applies the LTE predicate on the "apk_url" field.
func ApkURLLTE(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldApkURL), v))
	})
}

// ApkURLContains applies the Contains predicate on the "apk_url" field.
func ApkURLContains(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldApkURL), v))
	})
}

// ApkURLHasPrefix applies the HasPrefix predicate on the "apk_url" field.
func ApkURLHasPrefix(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldApkURL), v))
	})
}

// ApkURLHasSuffix applies the HasSuffix predicate on the "apk_url" field.
func ApkURLHasSuffix(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldApkURL), v))
	})
}

// ApkURLIsNil applies the IsNil predicate on the "apk_url" field.
func ApkURLIsNil() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldApkURL)))
	})
}

// ApkURLNotNil applies the NotNil predicate on the "apk_url" field.
func ApkURLNotNil() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldApkURL)))
	})
}

// ApkURLEqualFold applies the EqualFold predicate on the "apk_url" field.
func ApkURLEqualFold(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldApkURL), v))
	})
}

// ApkURLContainsFold applies the ContainsFold predicate on the "apk_url" field.
func ApkURLContainsFold(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldApkURL), v))
	})
}

// PlistURLEQ applies the EQ predicate on the "plist_url" field.
func PlistURLEQ(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlistURL), v))
	})
}

// PlistURLNEQ applies the NEQ predicate on the "plist_url" field.
func PlistURLNEQ(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlistURL), v))
	})
}

// PlistURLIn applies the In predicate on the "plist_url" field.
func PlistURLIn(vs ...string) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlistURL), v...))
	})
}

// PlistURLNotIn applies the NotIn predicate on the "plist_url" field.
func PlistURLNotIn(vs ...string) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlistURL), v...))
	})
}

// PlistURLGT applies the GT predicate on the "plist_url" field.
func PlistURLGT(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlistURL), v))
	})
}

// PlistURLGTE applies the GTE predicate on the "plist_url" field.
func PlistURLGTE(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlistURL), v))
	})
}

// PlistURLLT applies the LT predicate on the "plist_url" field.
func PlistURLLT(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlistURL), v))
	})
}

// PlistURLLTE applies the LTE predicate on the "plist_url" field.
func PlistURLLTE(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlistURL), v))
	})
}

// PlistURLContains applies the Contains predicate on the "plist_url" field.
func PlistURLContains(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlistURL), v))
	})
}

// PlistURLHasPrefix applies the HasPrefix predicate on the "plist_url" field.
func PlistURLHasPrefix(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlistURL), v))
	})
}

// PlistURLHasSuffix applies the HasSuffix predicate on the "plist_url" field.
func PlistURLHasSuffix(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlistURL), v))
	})
}

// PlistURLIsNil applies the IsNil predicate on the "plist_url" field.
func PlistURLIsNil() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPlistURL)))
	})
}

// PlistURLNotNil applies the NotNil predicate on the "plist_url" field.
func PlistURLNotNil() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPlistURL)))
	})
}

// PlistURLEqualFold applies the EqualFold predicate on the "plist_url" field.
func PlistURLEqualFold(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlistURL), v))
	})
}

// PlistURLContainsFold applies the ContainsFold predicate on the "plist_url" field.
func PlistURLContainsFold(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlistURL), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// AccessEQ applies the EQ predicate on the "access" field.
func AccessEQ(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccess), v))
	})
}

// AccessNEQ applies the NEQ predicate on the "access" field.
func AccessNEQ(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccess), v))
	})
}

// AccessIn applies the In predicate on the "access" field.
func AccessIn(vs ...string) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccess), v...))
	})
}

// AccessNotIn applies the NotIn predicate on the "access" field.
func AccessNotIn(vs ...string) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccess), v...))
	})
}

// AccessGT applies the GT predicate on the "access" field.
func AccessGT(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccess), v))
	})
}

// AccessGTE applies the GTE predicate on the "access" field.
func AccessGTE(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccess), v))
	})
}

// AccessLT applies the LT predicate on the "access" field.
func AccessLT(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccess), v))
	})
}

// AccessLTE applies the LTE predicate on the "access" field.
func AccessLTE(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccess), v))
	})
}

// AccessContains applies the Contains predicate on the "access" field.
func AccessContains(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccess), v))
	})
}

// AccessHasPrefix applies the HasPrefix predicate on the "access" field.
func AccessHasPrefix(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccess), v))
	})
}

// AccessHasSuffix applies the HasSuffix predicate on the "access" field.
func AccessHasSuffix(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccess), v))
	})
}

// AccessIsNil applies the IsNil predicate on the "access" field.
func AccessIsNil() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccess)))
	})
}

// AccessNotNil applies the NotNil predicate on the "access" field.
func AccessNotNil() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccess)))
	})
}

// AccessEqualFold applies the EqualFold predicate on the "access" field.
func AccessEqualFold(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccess), v))
	})
}

// AccessContainsFold applies the ContainsFold predicate on the "access" field.
func AccessContainsFold(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccess), v))
	})
}

// AccessCodeEQ applies the EQ predicate on the "access_code" field.
func AccessCodeEQ(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessCode), v))
	})
}

// AccessCodeNEQ applies the NEQ predicate on the "access_code" field.
func AccessCodeNEQ(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccessCode), v))
	})
}

// AccessCodeIn applies the In predicate on the "access_code" field.
func AccessCodeIn(vs ...string) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccessCode), v...))
	})
}

// AccessCodeNotIn applies the NotIn predicate on the "access_code" field.
func AccessCodeNotIn(vs ...string) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccessCode), v...))
	})
}

// AccessCodeGT applies the GT predicate on the "access_code" field.
func AccessCodeGT(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccessCode), v))
	})
}

// AccessCodeGTE applies the GTE predicate on the "access_code" field.
func AccessCodeGTE(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccessCode), v))
	})
}

// AccessCodeLT applies the LT predicate on the "access_code" field.
func AccessCodeLT(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccessCode), v))
	})
}

// AccessCodeLTE applies the LTE predicate on the "access_code" field.
func AccessCodeLTE(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccessCode), v))
	})
}

// AccessCodeContains applies the Contains predicate on the "access_code" field.
func AccessCodeContains(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccessCode), v))
	})
}

// AccessCodeHasPrefix applies the HasPrefix predicate on the "access_code" field.
func AccessCodeHasPrefix(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccessCode), v))
	})
}

// AccessCodeHasSuffix applies the HasSuffix predicate on the "access_code" field.
func AccessCodeHasSuffix(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccessCode), v))
	})
}

// AccessCodeIsNil applies the IsNil predicate on the "access_code" field.
func AccessCodeIsNil() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccessCode)))
	})
}

// AccessCodeNotNil applies the NotNil predicate on the "access_code" field.
func AccessCodeNotNil() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccessCode)))
	})
}

// AccessCodeEqualFold applies the EqualFold predicate on the "access_code" field.
func AccessCodeEqualFold(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccessCode), v))
	})
}

// AccessCodeContainsFold applies the ContainsFold predicate on the "access_code" field.
func AccessCodeContainsFold(v string) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccessCode), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatus)))
	})
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatus)))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Version {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UserTable, UserPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UserTable, UserPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApp applies the HasEdge predicate on the "app" edge.
func HasApp() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, AppTable, AppPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppWith applies the HasEdge predicate on the "app" edge with a given conditions (other predicates).
func HasAppWith(preds ...predicate.App) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, AppTable, AppPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHistories applies the HasEdge predicate on the "histories" edge.
func HasHistories() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HistoriesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, HistoriesTable, HistoriesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHistoriesWith applies the HasEdge predicate on the "histories" edge with a given conditions (other predicates).
func HasHistoriesWith(preds ...predicate.History) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HistoriesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, HistoriesTable, HistoriesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Version) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Version) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Version) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		p(s.Not())
	})
}
