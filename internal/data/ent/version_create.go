// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"yayar/internal/data/ent/app"
	"yayar/internal/data/ent/history"
	"yayar/internal/data/ent/user"
	"yayar/internal/data/ent/version"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VersionCreate is the builder for creating a Version entity.
type VersionCreate struct {
	config
	mutation *VersionMutation
	hooks    []Hook
}

// SetVersion sets the "version" field.
func (vc *VersionCreate) SetVersion(s string) *VersionCreate {
	vc.mutation.SetVersion(s)
	return vc
}

// SetBuild sets the "build" field.
func (vc *VersionCreate) SetBuild(i int) *VersionCreate {
	vc.mutation.SetBuild(i)
	return vc
}

// SetApkSize sets the "apk_size" field.
func (vc *VersionCreate) SetApkSize(f float64) *VersionCreate {
	vc.mutation.SetApkSize(f)
	return vc
}

// SetNillableApkSize sets the "apk_size" field if the given value is not nil.
func (vc *VersionCreate) SetNillableApkSize(f *float64) *VersionCreate {
	if f != nil {
		vc.SetApkSize(*f)
	}
	return vc
}

// SetIpaSize sets the "ipa_size" field.
func (vc *VersionCreate) SetIpaSize(f float64) *VersionCreate {
	vc.mutation.SetIpaSize(f)
	return vc
}

// SetNillableIpaSize sets the "ipa_size" field if the given value is not nil.
func (vc *VersionCreate) SetNillableIpaSize(f *float64) *VersionCreate {
	if f != nil {
		vc.SetIpaSize(*f)
	}
	return vc
}

// SetIpaURL sets the "ipa_url" field.
func (vc *VersionCreate) SetIpaURL(s string) *VersionCreate {
	vc.mutation.SetIpaURL(s)
	return vc
}

// SetNillableIpaURL sets the "ipa_url" field if the given value is not nil.
func (vc *VersionCreate) SetNillableIpaURL(s *string) *VersionCreate {
	if s != nil {
		vc.SetIpaURL(*s)
	}
	return vc
}

// SetApkURL sets the "apk_url" field.
func (vc *VersionCreate) SetApkURL(s string) *VersionCreate {
	vc.mutation.SetApkURL(s)
	return vc
}

// SetNillableApkURL sets the "apk_url" field if the given value is not nil.
func (vc *VersionCreate) SetNillableApkURL(s *string) *VersionCreate {
	if s != nil {
		vc.SetApkURL(*s)
	}
	return vc
}

// SetPlistURL sets the "plist_url" field.
func (vc *VersionCreate) SetPlistURL(s string) *VersionCreate {
	vc.mutation.SetPlistURL(s)
	return vc
}

// SetNillablePlistURL sets the "plist_url" field if the given value is not nil.
func (vc *VersionCreate) SetNillablePlistURL(s *string) *VersionCreate {
	if s != nil {
		vc.SetPlistURL(*s)
	}
	return vc
}

// SetDescription sets the "description" field.
func (vc *VersionCreate) SetDescription(s string) *VersionCreate {
	vc.mutation.SetDescription(s)
	return vc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vc *VersionCreate) SetNillableDescription(s *string) *VersionCreate {
	if s != nil {
		vc.SetDescription(*s)
	}
	return vc
}

// SetAccess sets the "access" field.
func (vc *VersionCreate) SetAccess(s string) *VersionCreate {
	vc.mutation.SetAccess(s)
	return vc
}

// SetNillableAccess sets the "access" field if the given value is not nil.
func (vc *VersionCreate) SetNillableAccess(s *string) *VersionCreate {
	if s != nil {
		vc.SetAccess(*s)
	}
	return vc
}

// SetAccessCode sets the "access_code" field.
func (vc *VersionCreate) SetAccessCode(s string) *VersionCreate {
	vc.mutation.SetAccessCode(s)
	return vc
}

// SetNillableAccessCode sets the "access_code" field if the given value is not nil.
func (vc *VersionCreate) SetNillableAccessCode(s *string) *VersionCreate {
	if s != nil {
		vc.SetAccessCode(*s)
	}
	return vc
}

// SetStatus sets the "status" field.
func (vc *VersionCreate) SetStatus(i int) *VersionCreate {
	vc.mutation.SetStatus(i)
	return vc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vc *VersionCreate) SetNillableStatus(i *int) *VersionCreate {
	if i != nil {
		vc.SetStatus(*i)
	}
	return vc
}

// SetCreatedAt sets the "createdAt" field.
func (vc *VersionCreate) SetCreatedAt(t time.Time) *VersionCreate {
	vc.mutation.SetCreatedAt(t)
	return vc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (vc *VersionCreate) SetNillableCreatedAt(t *time.Time) *VersionCreate {
	if t != nil {
		vc.SetCreatedAt(*t)
	}
	return vc
}

// SetUpdatedAt sets the "updatedAt" field.
func (vc *VersionCreate) SetUpdatedAt(t time.Time) *VersionCreate {
	vc.mutation.SetUpdatedAt(t)
	return vc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (vc *VersionCreate) SetNillableUpdatedAt(t *time.Time) *VersionCreate {
	if t != nil {
		vc.SetUpdatedAt(*t)
	}
	return vc
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (vc *VersionCreate) AddUserIDs(ids ...int) *VersionCreate {
	vc.mutation.AddUserIDs(ids...)
	return vc
}

// AddUser adds the "user" edges to the User entity.
func (vc *VersionCreate) AddUser(u ...*User) *VersionCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vc.AddUserIDs(ids...)
}

// AddAppIDs adds the "app" edge to the App entity by IDs.
func (vc *VersionCreate) AddAppIDs(ids ...int) *VersionCreate {
	vc.mutation.AddAppIDs(ids...)
	return vc
}

// AddApp adds the "app" edges to the App entity.
func (vc *VersionCreate) AddApp(a ...*App) *VersionCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return vc.AddAppIDs(ids...)
}

// AddHistoryIDs adds the "histories" edge to the History entity by IDs.
func (vc *VersionCreate) AddHistoryIDs(ids ...int) *VersionCreate {
	vc.mutation.AddHistoryIDs(ids...)
	return vc
}

// AddHistories adds the "histories" edges to the History entity.
func (vc *VersionCreate) AddHistories(h ...*History) *VersionCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return vc.AddHistoryIDs(ids...)
}

// Mutation returns the VersionMutation object of the builder.
func (vc *VersionCreate) Mutation() *VersionMutation {
	return vc.mutation
}

// Save creates the Version in the database.
func (vc *VersionCreate) Save(ctx context.Context) (*Version, error) {
	var (
		err  error
		node *Version
	)
	vc.defaults()
	if len(vc.hooks) == 0 {
		if err = vc.check(); err != nil {
			return nil, err
		}
		node, err = vc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VersionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vc.check(); err != nil {
				return nil, err
			}
			vc.mutation = mutation
			if node, err = vc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(vc.hooks) - 1; i >= 0; i-- {
			if vc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VersionCreate) SaveX(ctx context.Context) *Version {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VersionCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VersionCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *VersionCreate) defaults() {
	if _, ok := vc.mutation.ApkSize(); !ok {
		v := version.DefaultApkSize
		vc.mutation.SetApkSize(v)
	}
	if _, ok := vc.mutation.IpaSize(); !ok {
		v := version.DefaultIpaSize
		vc.mutation.SetIpaSize(v)
	}
	if _, ok := vc.mutation.IpaURL(); !ok {
		v := version.DefaultIpaURL
		vc.mutation.SetIpaURL(v)
	}
	if _, ok := vc.mutation.ApkURL(); !ok {
		v := version.DefaultApkURL
		vc.mutation.SetApkURL(v)
	}
	if _, ok := vc.mutation.PlistURL(); !ok {
		v := version.DefaultPlistURL
		vc.mutation.SetPlistURL(v)
	}
	if _, ok := vc.mutation.Description(); !ok {
		v := version.DefaultDescription
		vc.mutation.SetDescription(v)
	}
	if _, ok := vc.mutation.Access(); !ok {
		v := version.DefaultAccess
		vc.mutation.SetAccess(v)
	}
	if _, ok := vc.mutation.AccessCode(); !ok {
		v := version.DefaultAccessCode
		vc.mutation.SetAccessCode(v)
	}
	if _, ok := vc.mutation.Status(); !ok {
		v := version.DefaultStatus
		vc.mutation.SetStatus(v)
	}
	if _, ok := vc.mutation.CreatedAt(); !ok {
		v := version.DefaultCreatedAt()
		vc.mutation.SetCreatedAt(v)
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		v := version.DefaultUpdatedAt()
		vc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VersionCreate) check() error {
	if _, ok := vc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Version.version"`)}
	}
	if _, ok := vc.mutation.Build(); !ok {
		return &ValidationError{Name: "build", err: errors.New(`ent: missing required field "Version.build"`)}
	}
	if _, ok := vc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Version.createdAt"`)}
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "Version.updatedAt"`)}
	}
	return nil
}

func (vc *VersionCreate) sqlSave(ctx context.Context) (*Version, error) {
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (vc *VersionCreate) createSpec() (*Version, *sqlgraph.CreateSpec) {
	var (
		_node = &Version{config: vc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: version.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: version.FieldID,
			},
		}
	)
	if value, ok := vc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: version.FieldVersion,
		})
		_node.Version = value
	}
	if value, ok := vc.mutation.Build(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: version.FieldBuild,
		})
		_node.Build = value
	}
	if value, ok := vc.mutation.ApkSize(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: version.FieldApkSize,
		})
		_node.ApkSize = value
	}
	if value, ok := vc.mutation.IpaSize(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: version.FieldIpaSize,
		})
		_node.IpaSize = value
	}
	if value, ok := vc.mutation.IpaURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: version.FieldIpaURL,
		})
		_node.IpaURL = value
	}
	if value, ok := vc.mutation.ApkURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: version.FieldApkURL,
		})
		_node.ApkURL = value
	}
	if value, ok := vc.mutation.PlistURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: version.FieldPlistURL,
		})
		_node.PlistURL = value
	}
	if value, ok := vc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: version.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := vc.mutation.Access(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: version.FieldAccess,
		})
		_node.Access = value
	}
	if value, ok := vc.mutation.AccessCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: version.FieldAccessCode,
		})
		_node.AccessCode = value
	}
	if value, ok := vc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: version.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := vc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: version.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := vc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: version.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := vc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   version.UserTable,
			Columns: version.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   version.AppTable,
			Columns: version.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.HistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   version.HistoriesTable,
			Columns: version.HistoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: history.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VersionCreateBulk is the builder for creating many Version entities in bulk.
type VersionCreateBulk struct {
	config
	builders []*VersionCreate
}

// Save creates the Version entities in the database.
func (vcb *VersionCreateBulk) Save(ctx context.Context) ([]*Version, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Version, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VersionCreateBulk) SaveX(ctx context.Context) []*Version {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VersionCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VersionCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
