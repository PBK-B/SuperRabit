// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"yayar/internal/data/ent/app"
	"yayar/internal/data/ent/history"
	"yayar/internal/data/ent/predicate"
	"yayar/internal/data/ent/user"
	"yayar/internal/data/ent/version"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VersionUpdate is the builder for updating Version entities.
type VersionUpdate struct {
	config
	hooks    []Hook
	mutation *VersionMutation
}

// Where appends a list predicates to the VersionUpdate builder.
func (vu *VersionUpdate) Where(ps ...predicate.Version) *VersionUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetVersion sets the "version" field.
func (vu *VersionUpdate) SetVersion(s string) *VersionUpdate {
	vu.mutation.SetVersion(s)
	return vu
}

// SetBuild sets the "build" field.
func (vu *VersionUpdate) SetBuild(i int) *VersionUpdate {
	vu.mutation.ResetBuild()
	vu.mutation.SetBuild(i)
	return vu
}

// AddBuild adds i to the "build" field.
func (vu *VersionUpdate) AddBuild(i int) *VersionUpdate {
	vu.mutation.AddBuild(i)
	return vu
}

// SetApkSize sets the "apk_size" field.
func (vu *VersionUpdate) SetApkSize(f float64) *VersionUpdate {
	vu.mutation.ResetApkSize()
	vu.mutation.SetApkSize(f)
	return vu
}

// SetNillableApkSize sets the "apk_size" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableApkSize(f *float64) *VersionUpdate {
	if f != nil {
		vu.SetApkSize(*f)
	}
	return vu
}

// AddApkSize adds f to the "apk_size" field.
func (vu *VersionUpdate) AddApkSize(f float64) *VersionUpdate {
	vu.mutation.AddApkSize(f)
	return vu
}

// ClearApkSize clears the value of the "apk_size" field.
func (vu *VersionUpdate) ClearApkSize() *VersionUpdate {
	vu.mutation.ClearApkSize()
	return vu
}

// SetIpaSize sets the "ipa_size" field.
func (vu *VersionUpdate) SetIpaSize(f float64) *VersionUpdate {
	vu.mutation.ResetIpaSize()
	vu.mutation.SetIpaSize(f)
	return vu
}

// SetNillableIpaSize sets the "ipa_size" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableIpaSize(f *float64) *VersionUpdate {
	if f != nil {
		vu.SetIpaSize(*f)
	}
	return vu
}

// AddIpaSize adds f to the "ipa_size" field.
func (vu *VersionUpdate) AddIpaSize(f float64) *VersionUpdate {
	vu.mutation.AddIpaSize(f)
	return vu
}

// ClearIpaSize clears the value of the "ipa_size" field.
func (vu *VersionUpdate) ClearIpaSize() *VersionUpdate {
	vu.mutation.ClearIpaSize()
	return vu
}

// SetIpaURL sets the "ipa_url" field.
func (vu *VersionUpdate) SetIpaURL(s string) *VersionUpdate {
	vu.mutation.SetIpaURL(s)
	return vu
}

// SetNillableIpaURL sets the "ipa_url" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableIpaURL(s *string) *VersionUpdate {
	if s != nil {
		vu.SetIpaURL(*s)
	}
	return vu
}

// ClearIpaURL clears the value of the "ipa_url" field.
func (vu *VersionUpdate) ClearIpaURL() *VersionUpdate {
	vu.mutation.ClearIpaURL()
	return vu
}

// SetApkURL sets the "apk_url" field.
func (vu *VersionUpdate) SetApkURL(s string) *VersionUpdate {
	vu.mutation.SetApkURL(s)
	return vu
}

// SetNillableApkURL sets the "apk_url" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableApkURL(s *string) *VersionUpdate {
	if s != nil {
		vu.SetApkURL(*s)
	}
	return vu
}

// ClearApkURL clears the value of the "apk_url" field.
func (vu *VersionUpdate) ClearApkURL() *VersionUpdate {
	vu.mutation.ClearApkURL()
	return vu
}

// SetPlistURL sets the "plist_url" field.
func (vu *VersionUpdate) SetPlistURL(s string) *VersionUpdate {
	vu.mutation.SetPlistURL(s)
	return vu
}

// SetNillablePlistURL sets the "plist_url" field if the given value is not nil.
func (vu *VersionUpdate) SetNillablePlistURL(s *string) *VersionUpdate {
	if s != nil {
		vu.SetPlistURL(*s)
	}
	return vu
}

// ClearPlistURL clears the value of the "plist_url" field.
func (vu *VersionUpdate) ClearPlistURL() *VersionUpdate {
	vu.mutation.ClearPlistURL()
	return vu
}

// SetDescription sets the "description" field.
func (vu *VersionUpdate) SetDescription(s string) *VersionUpdate {
	vu.mutation.SetDescription(s)
	return vu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableDescription(s *string) *VersionUpdate {
	if s != nil {
		vu.SetDescription(*s)
	}
	return vu
}

// ClearDescription clears the value of the "description" field.
func (vu *VersionUpdate) ClearDescription() *VersionUpdate {
	vu.mutation.ClearDescription()
	return vu
}

// SetAccess sets the "access" field.
func (vu *VersionUpdate) SetAccess(s string) *VersionUpdate {
	vu.mutation.SetAccess(s)
	return vu
}

// SetNillableAccess sets the "access" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableAccess(s *string) *VersionUpdate {
	if s != nil {
		vu.SetAccess(*s)
	}
	return vu
}

// ClearAccess clears the value of the "access" field.
func (vu *VersionUpdate) ClearAccess() *VersionUpdate {
	vu.mutation.ClearAccess()
	return vu
}

// SetAccessCode sets the "access_code" field.
func (vu *VersionUpdate) SetAccessCode(s string) *VersionUpdate {
	vu.mutation.SetAccessCode(s)
	return vu
}

// SetNillableAccessCode sets the "access_code" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableAccessCode(s *string) *VersionUpdate {
	if s != nil {
		vu.SetAccessCode(*s)
	}
	return vu
}

// ClearAccessCode clears the value of the "access_code" field.
func (vu *VersionUpdate) ClearAccessCode() *VersionUpdate {
	vu.mutation.ClearAccessCode()
	return vu
}

// SetStatus sets the "status" field.
func (vu *VersionUpdate) SetStatus(i int) *VersionUpdate {
	vu.mutation.ResetStatus()
	vu.mutation.SetStatus(i)
	return vu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableStatus(i *int) *VersionUpdate {
	if i != nil {
		vu.SetStatus(*i)
	}
	return vu
}

// AddStatus adds i to the "status" field.
func (vu *VersionUpdate) AddStatus(i int) *VersionUpdate {
	vu.mutation.AddStatus(i)
	return vu
}

// ClearStatus clears the value of the "status" field.
func (vu *VersionUpdate) ClearStatus() *VersionUpdate {
	vu.mutation.ClearStatus()
	return vu
}

// SetCreatedAt sets the "createdAt" field.
func (vu *VersionUpdate) SetCreatedAt(t time.Time) *VersionUpdate {
	vu.mutation.SetCreatedAt(t)
	return vu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableCreatedAt(t *time.Time) *VersionUpdate {
	if t != nil {
		vu.SetCreatedAt(*t)
	}
	return vu
}

// SetUpdatedAt sets the "updatedAt" field.
func (vu *VersionUpdate) SetUpdatedAt(t time.Time) *VersionUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (vu *VersionUpdate) AddUserIDs(ids ...int) *VersionUpdate {
	vu.mutation.AddUserIDs(ids...)
	return vu
}

// AddUser adds the "user" edges to the User entity.
func (vu *VersionUpdate) AddUser(u ...*User) *VersionUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vu.AddUserIDs(ids...)
}

// AddAppIDs adds the "app" edge to the App entity by IDs.
func (vu *VersionUpdate) AddAppIDs(ids ...int) *VersionUpdate {
	vu.mutation.AddAppIDs(ids...)
	return vu
}

// AddApp adds the "app" edges to the App entity.
func (vu *VersionUpdate) AddApp(a ...*App) *VersionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return vu.AddAppIDs(ids...)
}

// AddHistoryIDs adds the "histories" edge to the History entity by IDs.
func (vu *VersionUpdate) AddHistoryIDs(ids ...int) *VersionUpdate {
	vu.mutation.AddHistoryIDs(ids...)
	return vu
}

// AddHistories adds the "histories" edges to the History entity.
func (vu *VersionUpdate) AddHistories(h ...*History) *VersionUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return vu.AddHistoryIDs(ids...)
}

// Mutation returns the VersionMutation object of the builder.
func (vu *VersionUpdate) Mutation() *VersionMutation {
	return vu.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (vu *VersionUpdate) ClearUser() *VersionUpdate {
	vu.mutation.ClearUser()
	return vu
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (vu *VersionUpdate) RemoveUserIDs(ids ...int) *VersionUpdate {
	vu.mutation.RemoveUserIDs(ids...)
	return vu
}

// RemoveUser removes "user" edges to User entities.
func (vu *VersionUpdate) RemoveUser(u ...*User) *VersionUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vu.RemoveUserIDs(ids...)
}

// ClearApp clears all "app" edges to the App entity.
func (vu *VersionUpdate) ClearApp() *VersionUpdate {
	vu.mutation.ClearApp()
	return vu
}

// RemoveAppIDs removes the "app" edge to App entities by IDs.
func (vu *VersionUpdate) RemoveAppIDs(ids ...int) *VersionUpdate {
	vu.mutation.RemoveAppIDs(ids...)
	return vu
}

// RemoveApp removes "app" edges to App entities.
func (vu *VersionUpdate) RemoveApp(a ...*App) *VersionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return vu.RemoveAppIDs(ids...)
}

// ClearHistories clears all "histories" edges to the History entity.
func (vu *VersionUpdate) ClearHistories() *VersionUpdate {
	vu.mutation.ClearHistories()
	return vu
}

// RemoveHistoryIDs removes the "histories" edge to History entities by IDs.
func (vu *VersionUpdate) RemoveHistoryIDs(ids ...int) *VersionUpdate {
	vu.mutation.RemoveHistoryIDs(ids...)
	return vu
}

// RemoveHistories removes "histories" edges to History entities.
func (vu *VersionUpdate) RemoveHistories(h ...*History) *VersionUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return vu.RemoveHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VersionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	vu.defaults()
	if len(vu.hooks) == 0 {
		affected, err = vu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VersionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vu.mutation = mutation
			affected, err = vu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vu.hooks) - 1; i >= 0; i-- {
			if vu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VersionUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VersionUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VersionUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VersionUpdate) defaults() {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		v := version.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
}

func (vu *VersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   version.Table,
			Columns: version.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: version.FieldID,
			},
		},
	}
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: version.FieldVersion,
		})
	}
	if value, ok := vu.mutation.Build(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: version.FieldBuild,
		})
	}
	if value, ok := vu.mutation.AddedBuild(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: version.FieldBuild,
		})
	}
	if value, ok := vu.mutation.ApkSize(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: version.FieldApkSize,
		})
	}
	if value, ok := vu.mutation.AddedApkSize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: version.FieldApkSize,
		})
	}
	if vu.mutation.ApkSizeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: version.FieldApkSize,
		})
	}
	if value, ok := vu.mutation.IpaSize(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: version.FieldIpaSize,
		})
	}
	if value, ok := vu.mutation.AddedIpaSize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: version.FieldIpaSize,
		})
	}
	if vu.mutation.IpaSizeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: version.FieldIpaSize,
		})
	}
	if value, ok := vu.mutation.IpaURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: version.FieldIpaURL,
		})
	}
	if vu.mutation.IpaURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: version.FieldIpaURL,
		})
	}
	if value, ok := vu.mutation.ApkURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: version.FieldApkURL,
		})
	}
	if vu.mutation.ApkURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: version.FieldApkURL,
		})
	}
	if value, ok := vu.mutation.PlistURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: version.FieldPlistURL,
		})
	}
	if vu.mutation.PlistURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: version.FieldPlistURL,
		})
	}
	if value, ok := vu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: version.FieldDescription,
		})
	}
	if vu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: version.FieldDescription,
		})
	}
	if value, ok := vu.mutation.Access(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: version.FieldAccess,
		})
	}
	if vu.mutation.AccessCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: version.FieldAccess,
		})
	}
	if value, ok := vu.mutation.AccessCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: version.FieldAccessCode,
		})
	}
	if vu.mutation.AccessCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: version.FieldAccessCode,
		})
	}
	if value, ok := vu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: version.FieldStatus,
		})
	}
	if value, ok := vu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: version.FieldStatus,
		})
	}
	if vu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: version.FieldStatus,
		})
	}
	if value, ok := vu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: version.FieldCreatedAt,
		})
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: version.FieldUpdatedAt,
		})
	}
	if vu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   version.UserTable,
			Columns: version.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedUserIDs(); len(nodes) > 0 && !vu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   version.UserTable,
			Columns: version.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   version.UserTable,
			Columns: version.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   version.AppTable,
			Columns: version.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedAppIDs(); len(nodes) > 0 && !vu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   version.AppTable,
			Columns: version.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   version.AppTable,
			Columns: version.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   version.HistoriesTable,
			Columns: version.HistoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: history.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedHistoriesIDs(); len(nodes) > 0 && !vu.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   version.HistoriesTable,
			Columns: version.HistoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: history.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.HistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   version.HistoriesTable,
			Columns: version.HistoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: history.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{version.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// VersionUpdateOne is the builder for updating a single Version entity.
type VersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VersionMutation
}

// SetVersion sets the "version" field.
func (vuo *VersionUpdateOne) SetVersion(s string) *VersionUpdateOne {
	vuo.mutation.SetVersion(s)
	return vuo
}

// SetBuild sets the "build" field.
func (vuo *VersionUpdateOne) SetBuild(i int) *VersionUpdateOne {
	vuo.mutation.ResetBuild()
	vuo.mutation.SetBuild(i)
	return vuo
}

// AddBuild adds i to the "build" field.
func (vuo *VersionUpdateOne) AddBuild(i int) *VersionUpdateOne {
	vuo.mutation.AddBuild(i)
	return vuo
}

// SetApkSize sets the "apk_size" field.
func (vuo *VersionUpdateOne) SetApkSize(f float64) *VersionUpdateOne {
	vuo.mutation.ResetApkSize()
	vuo.mutation.SetApkSize(f)
	return vuo
}

// SetNillableApkSize sets the "apk_size" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableApkSize(f *float64) *VersionUpdateOne {
	if f != nil {
		vuo.SetApkSize(*f)
	}
	return vuo
}

// AddApkSize adds f to the "apk_size" field.
func (vuo *VersionUpdateOne) AddApkSize(f float64) *VersionUpdateOne {
	vuo.mutation.AddApkSize(f)
	return vuo
}

// ClearApkSize clears the value of the "apk_size" field.
func (vuo *VersionUpdateOne) ClearApkSize() *VersionUpdateOne {
	vuo.mutation.ClearApkSize()
	return vuo
}

// SetIpaSize sets the "ipa_size" field.
func (vuo *VersionUpdateOne) SetIpaSize(f float64) *VersionUpdateOne {
	vuo.mutation.ResetIpaSize()
	vuo.mutation.SetIpaSize(f)
	return vuo
}

// SetNillableIpaSize sets the "ipa_size" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableIpaSize(f *float64) *VersionUpdateOne {
	if f != nil {
		vuo.SetIpaSize(*f)
	}
	return vuo
}

// AddIpaSize adds f to the "ipa_size" field.
func (vuo *VersionUpdateOne) AddIpaSize(f float64) *VersionUpdateOne {
	vuo.mutation.AddIpaSize(f)
	return vuo
}

// ClearIpaSize clears the value of the "ipa_size" field.
func (vuo *VersionUpdateOne) ClearIpaSize() *VersionUpdateOne {
	vuo.mutation.ClearIpaSize()
	return vuo
}

// SetIpaURL sets the "ipa_url" field.
func (vuo *VersionUpdateOne) SetIpaURL(s string) *VersionUpdateOne {
	vuo.mutation.SetIpaURL(s)
	return vuo
}

// SetNillableIpaURL sets the "ipa_url" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableIpaURL(s *string) *VersionUpdateOne {
	if s != nil {
		vuo.SetIpaURL(*s)
	}
	return vuo
}

// ClearIpaURL clears the value of the "ipa_url" field.
func (vuo *VersionUpdateOne) ClearIpaURL() *VersionUpdateOne {
	vuo.mutation.ClearIpaURL()
	return vuo
}

// SetApkURL sets the "apk_url" field.
func (vuo *VersionUpdateOne) SetApkURL(s string) *VersionUpdateOne {
	vuo.mutation.SetApkURL(s)
	return vuo
}

// SetNillableApkURL sets the "apk_url" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableApkURL(s *string) *VersionUpdateOne {
	if s != nil {
		vuo.SetApkURL(*s)
	}
	return vuo
}

// ClearApkURL clears the value of the "apk_url" field.
func (vuo *VersionUpdateOne) ClearApkURL() *VersionUpdateOne {
	vuo.mutation.ClearApkURL()
	return vuo
}

// SetPlistURL sets the "plist_url" field.
func (vuo *VersionUpdateOne) SetPlistURL(s string) *VersionUpdateOne {
	vuo.mutation.SetPlistURL(s)
	return vuo
}

// SetNillablePlistURL sets the "plist_url" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillablePlistURL(s *string) *VersionUpdateOne {
	if s != nil {
		vuo.SetPlistURL(*s)
	}
	return vuo
}

// ClearPlistURL clears the value of the "plist_url" field.
func (vuo *VersionUpdateOne) ClearPlistURL() *VersionUpdateOne {
	vuo.mutation.ClearPlistURL()
	return vuo
}

// SetDescription sets the "description" field.
func (vuo *VersionUpdateOne) SetDescription(s string) *VersionUpdateOne {
	vuo.mutation.SetDescription(s)
	return vuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableDescription(s *string) *VersionUpdateOne {
	if s != nil {
		vuo.SetDescription(*s)
	}
	return vuo
}

// ClearDescription clears the value of the "description" field.
func (vuo *VersionUpdateOne) ClearDescription() *VersionUpdateOne {
	vuo.mutation.ClearDescription()
	return vuo
}

// SetAccess sets the "access" field.
func (vuo *VersionUpdateOne) SetAccess(s string) *VersionUpdateOne {
	vuo.mutation.SetAccess(s)
	return vuo
}

// SetNillableAccess sets the "access" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableAccess(s *string) *VersionUpdateOne {
	if s != nil {
		vuo.SetAccess(*s)
	}
	return vuo
}

// ClearAccess clears the value of the "access" field.
func (vuo *VersionUpdateOne) ClearAccess() *VersionUpdateOne {
	vuo.mutation.ClearAccess()
	return vuo
}

// SetAccessCode sets the "access_code" field.
func (vuo *VersionUpdateOne) SetAccessCode(s string) *VersionUpdateOne {
	vuo.mutation.SetAccessCode(s)
	return vuo
}

// SetNillableAccessCode sets the "access_code" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableAccessCode(s *string) *VersionUpdateOne {
	if s != nil {
		vuo.SetAccessCode(*s)
	}
	return vuo
}

// ClearAccessCode clears the value of the "access_code" field.
func (vuo *VersionUpdateOne) ClearAccessCode() *VersionUpdateOne {
	vuo.mutation.ClearAccessCode()
	return vuo
}

// SetStatus sets the "status" field.
func (vuo *VersionUpdateOne) SetStatus(i int) *VersionUpdateOne {
	vuo.mutation.ResetStatus()
	vuo.mutation.SetStatus(i)
	return vuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableStatus(i *int) *VersionUpdateOne {
	if i != nil {
		vuo.SetStatus(*i)
	}
	return vuo
}

// AddStatus adds i to the "status" field.
func (vuo *VersionUpdateOne) AddStatus(i int) *VersionUpdateOne {
	vuo.mutation.AddStatus(i)
	return vuo
}

// ClearStatus clears the value of the "status" field.
func (vuo *VersionUpdateOne) ClearStatus() *VersionUpdateOne {
	vuo.mutation.ClearStatus()
	return vuo
}

// SetCreatedAt sets the "createdAt" field.
func (vuo *VersionUpdateOne) SetCreatedAt(t time.Time) *VersionUpdateOne {
	vuo.mutation.SetCreatedAt(t)
	return vuo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableCreatedAt(t *time.Time) *VersionUpdateOne {
	if t != nil {
		vuo.SetCreatedAt(*t)
	}
	return vuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (vuo *VersionUpdateOne) SetUpdatedAt(t time.Time) *VersionUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (vuo *VersionUpdateOne) AddUserIDs(ids ...int) *VersionUpdateOne {
	vuo.mutation.AddUserIDs(ids...)
	return vuo
}

// AddUser adds the "user" edges to the User entity.
func (vuo *VersionUpdateOne) AddUser(u ...*User) *VersionUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vuo.AddUserIDs(ids...)
}

// AddAppIDs adds the "app" edge to the App entity by IDs.
func (vuo *VersionUpdateOne) AddAppIDs(ids ...int) *VersionUpdateOne {
	vuo.mutation.AddAppIDs(ids...)
	return vuo
}

// AddApp adds the "app" edges to the App entity.
func (vuo *VersionUpdateOne) AddApp(a ...*App) *VersionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return vuo.AddAppIDs(ids...)
}

// AddHistoryIDs adds the "histories" edge to the History entity by IDs.
func (vuo *VersionUpdateOne) AddHistoryIDs(ids ...int) *VersionUpdateOne {
	vuo.mutation.AddHistoryIDs(ids...)
	return vuo
}

// AddHistories adds the "histories" edges to the History entity.
func (vuo *VersionUpdateOne) AddHistories(h ...*History) *VersionUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return vuo.AddHistoryIDs(ids...)
}

// Mutation returns the VersionMutation object of the builder.
func (vuo *VersionUpdateOne) Mutation() *VersionMutation {
	return vuo.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (vuo *VersionUpdateOne) ClearUser() *VersionUpdateOne {
	vuo.mutation.ClearUser()
	return vuo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (vuo *VersionUpdateOne) RemoveUserIDs(ids ...int) *VersionUpdateOne {
	vuo.mutation.RemoveUserIDs(ids...)
	return vuo
}

// RemoveUser removes "user" edges to User entities.
func (vuo *VersionUpdateOne) RemoveUser(u ...*User) *VersionUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vuo.RemoveUserIDs(ids...)
}

// ClearApp clears all "app" edges to the App entity.
func (vuo *VersionUpdateOne) ClearApp() *VersionUpdateOne {
	vuo.mutation.ClearApp()
	return vuo
}

// RemoveAppIDs removes the "app" edge to App entities by IDs.
func (vuo *VersionUpdateOne) RemoveAppIDs(ids ...int) *VersionUpdateOne {
	vuo.mutation.RemoveAppIDs(ids...)
	return vuo
}

// RemoveApp removes "app" edges to App entities.
func (vuo *VersionUpdateOne) RemoveApp(a ...*App) *VersionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return vuo.RemoveAppIDs(ids...)
}

// ClearHistories clears all "histories" edges to the History entity.
func (vuo *VersionUpdateOne) ClearHistories() *VersionUpdateOne {
	vuo.mutation.ClearHistories()
	return vuo
}

// RemoveHistoryIDs removes the "histories" edge to History entities by IDs.
func (vuo *VersionUpdateOne) RemoveHistoryIDs(ids ...int) *VersionUpdateOne {
	vuo.mutation.RemoveHistoryIDs(ids...)
	return vuo
}

// RemoveHistories removes "histories" edges to History entities.
func (vuo *VersionUpdateOne) RemoveHistories(h ...*History) *VersionUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return vuo.RemoveHistoryIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VersionUpdateOne) Select(field string, fields ...string) *VersionUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Version entity.
func (vuo *VersionUpdateOne) Save(ctx context.Context) (*Version, error) {
	var (
		err  error
		node *Version
	)
	vuo.defaults()
	if len(vuo.hooks) == 0 {
		node, err = vuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VersionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vuo.mutation = mutation
			node, err = vuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuo.hooks) - 1; i >= 0; i-- {
			if vuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VersionUpdateOne) SaveX(ctx context.Context) *Version {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VersionUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VersionUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VersionUpdateOne) defaults() {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		v := version.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
}

func (vuo *VersionUpdateOne) sqlSave(ctx context.Context) (_node *Version, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   version.Table,
			Columns: version.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: version.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Version.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, version.FieldID)
		for _, f := range fields {
			if !version.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != version.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: version.FieldVersion,
		})
	}
	if value, ok := vuo.mutation.Build(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: version.FieldBuild,
		})
	}
	if value, ok := vuo.mutation.AddedBuild(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: version.FieldBuild,
		})
	}
	if value, ok := vuo.mutation.ApkSize(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: version.FieldApkSize,
		})
	}
	if value, ok := vuo.mutation.AddedApkSize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: version.FieldApkSize,
		})
	}
	if vuo.mutation.ApkSizeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: version.FieldApkSize,
		})
	}
	if value, ok := vuo.mutation.IpaSize(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: version.FieldIpaSize,
		})
	}
	if value, ok := vuo.mutation.AddedIpaSize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: version.FieldIpaSize,
		})
	}
	if vuo.mutation.IpaSizeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: version.FieldIpaSize,
		})
	}
	if value, ok := vuo.mutation.IpaURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: version.FieldIpaURL,
		})
	}
	if vuo.mutation.IpaURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: version.FieldIpaURL,
		})
	}
	if value, ok := vuo.mutation.ApkURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: version.FieldApkURL,
		})
	}
	if vuo.mutation.ApkURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: version.FieldApkURL,
		})
	}
	if value, ok := vuo.mutation.PlistURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: version.FieldPlistURL,
		})
	}
	if vuo.mutation.PlistURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: version.FieldPlistURL,
		})
	}
	if value, ok := vuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: version.FieldDescription,
		})
	}
	if vuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: version.FieldDescription,
		})
	}
	if value, ok := vuo.mutation.Access(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: version.FieldAccess,
		})
	}
	if vuo.mutation.AccessCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: version.FieldAccess,
		})
	}
	if value, ok := vuo.mutation.AccessCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: version.FieldAccessCode,
		})
	}
	if vuo.mutation.AccessCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: version.FieldAccessCode,
		})
	}
	if value, ok := vuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: version.FieldStatus,
		})
	}
	if value, ok := vuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: version.FieldStatus,
		})
	}
	if vuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: version.FieldStatus,
		})
	}
	if value, ok := vuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: version.FieldCreatedAt,
		})
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: version.FieldUpdatedAt,
		})
	}
	if vuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   version.UserTable,
			Columns: version.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedUserIDs(); len(nodes) > 0 && !vuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   version.UserTable,
			Columns: version.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   version.UserTable,
			Columns: version.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   version.AppTable,
			Columns: version.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedAppIDs(); len(nodes) > 0 && !vuo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   version.AppTable,
			Columns: version.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   version.AppTable,
			Columns: version.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   version.HistoriesTable,
			Columns: version.HistoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: history.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedHistoriesIDs(); len(nodes) > 0 && !vuo.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   version.HistoriesTable,
			Columns: version.HistoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: history.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.HistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   version.HistoriesTable,
			Columns: version.HistoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: history.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Version{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{version.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
